//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace NetMPKApp.NetMPKService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vector", Namespace="http://schemas.datacontract.org/2004/07/System.Windows")]
    public partial struct Vector : System.ComponentModel.INotifyPropertyChanged {
        
        private double _xField;
        
        private double _yField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double _x {
            get {
                return this._xField;
            }
            set {
                if ((this._xField.Equals(value) != true)) {
                    this._xField = value;
                    this.RaisePropertyChanged("_x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double _y {
            get {
                return this._yField;
            }
            set {
                if ((this._yField.Equals(value) != true)) {
                    this._yField = value;
                    this.RaisePropertyChanged("_y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NetMPKService.IMPKService")]
    public interface IMPKService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetStopsNames", ReplyAction="http://tempuri.org/IMPKService/GetStopsNamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetStopsNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetStopsWithStreets", ReplyAction="http://tempuri.org/IMPKService/GetStopsWithStreetsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetStopsWithStreetsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetStopByName", ReplyAction="http://tempuri.org/IMPKService/GetStopByNameResponse")]
        System.Threading.Tasks.Task<System.Tuple<int, string, string, double, double, System.Collections.Generic.List<int>>> GetStopByNameAsync(string stopName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetStopWithCords", ReplyAction="http://tempuri.org/IMPKService/GetStopWithCordsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, double, double>>> GetStopWithCordsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetAllLines", ReplyAction="http://tempuri.org/IMPKService/GetAllLinesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, string, string, string, string>>> GetAllLinesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetLineRoutes", ReplyAction="http://tempuri.org/IMPKService/GetLineRoutesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>> GetLineRoutesAsync(int lineNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetDirectionsForLine", ReplyAction="http://tempuri.org/IMPKService/GetDirectionsForLineResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetDirectionsForLineAsync(int lineNo, string stopName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetNearestStop", ReplyAction="http://tempuri.org/IMPKService/GetNearestStopResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, double, double>> GetNearestStopAsync(double latitude, double longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetStreetNameByStop", ReplyAction="http://tempuri.org/IMPKService/GetStreetNameByStopResponse")]
        System.Threading.Tasks.Task<string> GetStreetNameByStopAsync(string stopName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetTimeTable", ReplyAction="http://tempuri.org/IMPKService/GetTimeTableResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<string>>> GetTimeTableAsync(int lineNo, string stopName, string direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetRoutes", ReplyAction="http://tempuri.org/IMPKService/GetRoutesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<int, string, string, string, string, int>>>> GetRoutesAsync(string startName, string stopName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/SaveRouteForUser", ReplyAction="http://tempuri.org/IMPKService/SaveRouteForUserResponse")]
        System.Threading.Tasks.Task<bool> SaveRouteForUserAsync(string userId, string firstStop, string lastStop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetSavedRoutesForUser", ReplyAction="http://tempuri.org/IMPKService/GetSavedRoutesForUserResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string>>> GetSavedRoutesForUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetMapPoints", ReplyAction="http://tempuri.org/IMPKService/GetMapPointsResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.Dictionary<string, NetMPKApp.NetMPKService.Vector>, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>, System.Collections.Generic.List<System.Tuple<NetMPKApp.NetMPKService.Vector, NetMPKApp.NetMPKService.Vector>>>> GetMapPointsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetPointNeighbours", ReplyAction="http://tempuri.org/IMPKService/GetPointNeighboursResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetPointNeighboursAsync(string stopName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/LoginFree", ReplyAction="http://tempuri.org/IMPKService/LoginFreeResponse")]
        System.Threading.Tasks.Task<bool> LoginFreeAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/EmailFree", ReplyAction="http://tempuri.org/IMPKService/EmailFreeResponse")]
        System.Threading.Tasks.Task<bool> EmailFreeAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/RegisterUser", ReplyAction="http://tempuri.org/IMPKService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string login, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/LoginUser", ReplyAction="http://tempuri.org/IMPKService/LoginUserResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, string>> LoginUserAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/LoginEncryptedUser", ReplyAction="http://tempuri.org/IMPKService/LoginEncryptedUserResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, string>> LoginEncryptedUserAsync(string login, string encryptedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMPKService/GetEncryptedPassword", ReplyAction="http://tempuri.org/IMPKService/GetEncryptedPasswordResponse")]
        System.Threading.Tasks.Task<string> GetEncryptedPasswordAsync(string login, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMPKServiceChannel : NetMPKApp.NetMPKService.IMPKService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MPKServiceClient : System.ServiceModel.ClientBase<NetMPKApp.NetMPKService.IMPKService>, NetMPKApp.NetMPKService.IMPKService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MPKServiceClient() : 
                base(MPKServiceClient.GetDefaultBinding(), MPKServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMPKService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MPKServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MPKServiceClient.GetBindingForEndpoint(endpointConfiguration), MPKServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MPKServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MPKServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MPKServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MPKServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MPKServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetStopsNamesAsync() {
            return base.Channel.GetStopsNamesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetStopsWithStreetsAsync() {
            return base.Channel.GetStopsWithStreetsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<int, string, string, double, double, System.Collections.Generic.List<int>>> GetStopByNameAsync(string stopName) {
            return base.Channel.GetStopByNameAsync(stopName);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, double, double>>> GetStopWithCordsAsync() {
            return base.Channel.GetStopWithCordsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<int, string, string, string, string>>> GetAllLinesAsync() {
            return base.Channel.GetAllLinesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>> GetLineRoutesAsync(int lineNo) {
            return base.Channel.GetLineRoutesAsync(lineNo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetDirectionsForLineAsync(int lineNo, string stopName) {
            return base.Channel.GetDirectionsForLineAsync(lineNo, stopName);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, double, double>> GetNearestStopAsync(double latitude, double longitude) {
            return base.Channel.GetNearestStopAsync(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<string> GetStreetNameByStopAsync(string stopName) {
            return base.Channel.GetStreetNameByStopAsync(stopName);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<string>>> GetTimeTableAsync(int lineNo, string stopName, string direction) {
            return base.Channel.GetTimeTableAsync(lineNo, stopName, direction);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<System.Tuple<int, string, string, string, string, int>>>> GetRoutesAsync(string startName, string stopName) {
            return base.Channel.GetRoutesAsync(startName, stopName);
        }
        
        public System.Threading.Tasks.Task<bool> SaveRouteForUserAsync(string userId, string firstStop, string lastStop) {
            return base.Channel.SaveRouteForUserAsync(userId, firstStop, lastStop);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Tuple<string, string>>> GetSavedRoutesForUserAsync(int userId) {
            return base.Channel.GetSavedRoutesForUserAsync(userId);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Collections.Generic.Dictionary<string, NetMPKApp.NetMPKService.Vector>, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>, System.Collections.Generic.List<System.Tuple<NetMPKApp.NetMPKService.Vector, NetMPKApp.NetMPKService.Vector>>>> GetMapPointsAsync() {
            return base.Channel.GetMapPointsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetPointNeighboursAsync(string stopName) {
            return base.Channel.GetPointNeighboursAsync(stopName);
        }
        
        public System.Threading.Tasks.Task<bool> LoginFreeAsync(string login) {
            return base.Channel.LoginFreeAsync(login);
        }
        
        public System.Threading.Tasks.Task<bool> EmailFreeAsync(string email) {
            return base.Channel.EmailFreeAsync(email);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string login, string password, string email) {
            return base.Channel.RegisterUserAsync(login, password, email);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, string>> LoginUserAsync(string login, string password) {
            return base.Channel.LoginUserAsync(login, password);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, string>> LoginEncryptedUserAsync(string login, string encryptedPassword) {
            return base.Channel.LoginEncryptedUserAsync(login, encryptedPassword);
        }
        
        public System.Threading.Tasks.Task<string> GetEncryptedPasswordAsync(string login, string password) {
            return base.Channel.GetEncryptedPasswordAsync(login, password);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMPKService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMPKService)) {
                return new System.ServiceModel.EndpointAddress("http://192.168.1.10:15782/NetMPKService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MPKServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMPKService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MPKServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMPKService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IMPKService,
        }
    }
}
